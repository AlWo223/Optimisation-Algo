import math
n, L = map(int, input().strip().split(" "))

graph = [[] for ii in range(0, n)]
for xx in range(0, n):
    for weight in input().strip().split(" "):
        graph[xx].append(int(weight))

from itertools import permutations

visited = set()

"""min_distances = list()
max_distances = list()
for ii in range(0, n):
    distances = sorted(graph[ii])
    min_distances.append(distances[1])
    max_distances.append(distances[-1])"""

### Calculate rough estimate for solutions boundaries
def checkSolutionBoundaries(current, remainingNodes, remainingL):
    #print("Check boundaries")
    min_edge_sum = 0
    max_edge_sum = 0
    for id in remainingNodes:
        min_edge_sum += min_distances[id]
        max_edge_sum += max_distances[id]
    min_edge_sum += min_distances[current]
    max_edge_sum += max_distances[current]
    #print("Remaining L: {}".format(remainingL))
    #print("Min edge sum: {}".format(min_edge_sum))
    #print("Max edge sum: {}".format(max_edge_sum))

    ### Check if L within boundaries
    if (remainingL < min_edge_sum) or (remainingL > max_edge_sum):
        #print("impossible")
        #exit()
        return False
    return True

def backtrack(current, remaining, dist):
    #print("Visit node: {}".format(current))
    if len(remaining) == 0:
        if(dist + graph[current][0]) == L:
            print("possible")
            exit()
        return
    if dist > L:
        return
    if not checkSolutionBoundaries(current, remaining, L-dist):
        #print("Exceeding boundaries, go back to parent")
        return
    """if (len(remaining)+1 > L-dist):
        #print("-- drop path, go back to parent --")
        return"""
    #print("-- Explore children --")
    for xx in remaining:
        #print("Explore child: {}".format(xx))
        dist_new = dist + graph[current][xx]
        if(dist_new < L):
            backtrack(xx, remaining - {xx}, dist_new)
        #print("Exploration ended or not feasible")
"""distances = {}
perms = list(permutations(range(0, n), n//2+1+n%2))
for perm in perms:
    if(perm in visited):
        continue
    visited.add(perm)
    visited.add(tuple(reversed(perm)))
    length = 0
    u = perm[0]
    for ii in perm:
        length += graph[u][ii]
        u = ii
    #length += graph[u][0]
    if(length >= L):
        continue
    start, end = perm[0], perm[-1]
    if(distances.get((start, end)) == None):
        distances[(start, end)] = list()
        distances[(end, start)] = list()
    distances[(start, end)].append((perm, length))
    distances[(end, start)].append((perm, length))

if(n%2==1): perms = list(permutations(range(0, n), n//2+1))
for perm in perms:
    length = 0
    u = perm[0]
    for ii in perm:
        length += graph[u][ii]
        u = ii
    #length += graph[perm[-1]][perm[0]]
    start, end = perm[0], perm[-1]
    #print("Perm 1: {}, Length: {}".format(perm, length))
    if (start, end) in distances:
        for perm2, length2 in distances[(start, end)]:
            #print("Perm 2: {}, Length 2: {}".format(perm2, length2))
            if (len(set(perm2).union(perm)) == n) and (length + length2 == L):
                print("possible")
                exit()"""
    
nodes = set(range(1, n))
perms = list(permutations(range(1, n), n//2))
visited = set()
for perm in perms:
    if(perm in visited):
       continue
    visited.add(perm)
    visited.add(tuple(reversed(perm)))
    remaining = nodes - set(perm)
    length = 0
    u = 0
    for ii in perm:
        length += graph[u][ii]
        u = ii
    #length += graph[u][0]
    if(length >= L):
        continue
    visited2 = set()
    #backtrack(perm[-1], remaining, length)
    for perm2 in permutations(remaining, len(remaining)):
        if(perm2 in visited2):
            continue
        visited2.add(perm2)
        visited2.add(reversed(perm2))
        u = perm[-1]
        pot_length = length
        for ii in perm2:
            pot_length += graph[u][ii]
            u = ii
            if(pot_length>L):
                break
        pot_length += graph[u][0]
        if(pot_length==L):
            print("possible")
            exit()

print("impossible")